#!/usr/bin/env node

/**
 * Script de Deployment para El Almac√©n de los Recuerdos
 * Automatiza el proceso de build y distribuci√≥n
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Colores para output
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSection(title) {
  console.log('\n' + '='.repeat(60));
  log(title, 'bold');
  console.log('='.repeat(60));
}

// Verificaciones previas al deployment
function preDeploymentChecks() {
  logSection('üîç VERIFICACIONES PREVIAS AL DEPLOYMENT');
  
  const checks = [
    {
      name: 'package.json existe',
      check: () => fs.existsSync('package.json'),
      fix: 'Crear package.json con npm init'
    },
    {
      name: 'node_modules existe',
      check: () => fs.existsSync('node_modules'),
      fix: 'Ejecutar pnpm install'
    },
    {
      name: 'src directory existe',
      check: () => fs.existsSync('src'),
      fix: 'Crear directorio src con c√≥digo fuente'
    },
    {
      name: 'TypeScript config v√°lido',
      check: () => {
        try {
          JSON.parse(fs.readFileSync('tsconfig.json', 'utf8'));
          return true;
        } catch {
          return false;
        }
      },
      fix: 'Corregir tsconfig.json'
    }
  ];

  let allPassed = true;
  
  checks.forEach(check => {
    const passed = check.check();
    if (passed) {
      log(`  ‚úÖ ${check.name}`, 'green');
    } else {
      log(`  ‚ùå ${check.name} - ${check.fix}`, 'red');
      allPassed = false;
    }
  });

  return allPassed;
}

// Testing previo al deployment
function runPreDeploymentTests() {
  logSection('üß™ TESTING PREVIO AL DEPLOYMENT');
  
  try {
    log('Ejecutando tests de integraci√≥n...', 'blue');
    execSync('node scripts/test-integration.js', { stdio: 'pipe' });
    log('‚úÖ Tests de integraci√≥n pasaron', 'green');
    return true;
  } catch (error) {
    log('‚ùå Tests de integraci√≥n fallaron', 'red');
    console.log(error.stdout?.toString() || error.message);
    return false;
  }
}

// Build de producci√≥n
function buildProduction() {
  logSection('üèóÔ∏è BUILD DE PRODUCCI√ìN');
  
  try {
    log('Ejecutando build de producci√≥n...', 'blue');
    execSync('npm run build', { stdio: 'inherit' });
    log('‚úÖ Build de producci√≥n exitoso', 'green');
    
    // Verificar que dist existe
    if (fs.existsSync('dist')) {
      log('‚úÖ Directorio dist creado correctamente', 'green');
      
      // Verificar archivos principales
      const distFiles = fs.readdirSync('dist');
      log(`üìÅ Archivos en dist: ${distFiles.length}`, 'cyan');
      
      return true;
    } else {
      log('‚ùå Directorio dist no fue creado', 'red');
      return false;
    }
  } catch (error) {
    log('‚ùå Error en build de producci√≥n', 'red');
    console.log(error.message);
    return false;
  }
}

// Build de Electron
function buildElectron() {
  logSection('‚ö° BUILD DE ELECTRON');
  
  try {
    log('Ejecutando build de Electron...', 'blue');
    execSync('npm run build:electron', { stdio: 'inherit' });
    log('‚úÖ Build de Electron exitoso', 'green');
    
    // Verificar que release existe
    if (fs.existsSync('release')) {
      log('‚úÖ Directorio release creado correctamente', 'green');
      return true;
    }
    
    return true;
  } catch (error) {
    log('‚ö†Ô∏è Build de Electron fall√≥ (puede ser normal si no est√° configurado)', 'yellow');
    console.log(error.message);
    return false; // No cr√≠tico
  }
}

// Generar documentaci√≥n de deployment
function generateDeploymentDocs() {
  logSection('üìö GENERANDO DOCUMENTACI√ìN DE DEPLOYMENT');
  
  const deploymentInfo = {
    timestamp: new Date().toISOString(),
    version: getVersion(),
    buildType: 'production',
    nodeVersion: process.version,
    platform: process.platform,
    distFiles: fs.existsSync('dist') ? fs.readdirSync('dist') : [],
    releaseFiles: fs.existsSync('release') ? fs.readdirSync('release') : []
  };

  const docContent = `# Deployment Information - El Almac√©n de los Recuerdos

**Fecha de Deployment:** ${deploymentInfo.timestamp}
**Versi√≥n:** ${deploymentInfo.version}
**Tipo de Build:** ${deploymentInfo.buildType}
**Node.js Version:** ${deploymentInfo.nodeVersion}
**Plataforma:** ${deploymentInfo.platform}

## Archivos de Distribuci√≥n

### Web Build (dist/)
${deploymentInfo.distFiles.length > 0 ? 
  deploymentInfo.distFiles.map(file => `- ${file}`).join('\n') :
  'No se generaron archivos de distribuci√≥n web'
}

### Electron Build (release/)
${deploymentInfo.releaseFiles.length > 0 ? 
  deploymentInfo.releaseFiles.map(file => `- ${file}`).join('\n') :
  'No se generaron archivos de distribuci√≥n Electron'
}

## Instrucciones de Deployment

### Web Deployment
1. Subir contenido de \`dist/\` a servidor web
2. Configurar servidor para SPA (Single Page Application)
3. Asegurar HTTPS para funcionalidades web avanzadas

### Electron Deployment
1. Distribuir archivos de \`release/\`
2. Incluir instrucciones de instalaci√≥n por plataforma
3. Configurar auto-updater si est√° habilitado

## Validaciones Realizadas
- ‚úÖ Tests de integraci√≥n pasados
- ‚úÖ Build de producci√≥n exitoso
- ‚úÖ Verificaciones de estructura completadas
- ‚úÖ Documentaci√≥n generada

---
*Generado autom√°ticamente por script de deployment*
`;

  fs.writeFileSync('deployment-info.md', docContent);
  log('üìÑ Documentaci√≥n de deployment generada: deployment-info.md', 'cyan');
}

// Obtener versi√≥n del package.json
function getVersion() {
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    return packageJson.version || '1.0.0';
  } catch {
    return '1.0.0';
  }
}

// Generar checklist de deployment
function generateDeploymentChecklist() {
  logSection('üìã GENERANDO CHECKLIST DE DEPLOYMENT');
  
  const checklist = `# Checklist de Deployment - El Almac√©n de los Recuerdos

## Pre-Deployment
- [ ] ‚úÖ Tests de integraci√≥n pasaron (${new Date().toISOString()})
- [ ] ‚úÖ Build de producci√≥n exitoso
- [ ] ‚úÖ Verificaciones de estructura completadas
- [ ] ‚úÖ Documentaci√≥n actualizada

## Web Deployment
- [ ] Subir archivos de dist/ a servidor
- [ ] Configurar redirects para SPA
- [ ] Verificar HTTPS habilitado
- [ ] Probar funcionalidades en producci√≥n
- [ ] Verificar Web APIs disponibles

## Electron Deployment
- [ ] Generar builds para todas las plataformas
- [ ] Probar instalaci√≥n en sistemas limpios
- [ ] Verificar permisos de archivos
- [ ] Probar funcionalidades nativas
- [ ] Configurar certificados de c√≥digo (opcional)

## Post-Deployment
- [ ] Monitorear logs de errores
- [ ] Verificar m√©tricas de performance
- [ ] Recopilar feedback de usuarios
- [ ] Documentar problemas encontrados
- [ ] Planificar siguientes iteraciones

## URLs y Recursos
- Repositorio: [URL del repositorio]
- Documentaci√≥n: /docs/
- Issues: [URL de issues]
- Testing: /scripts/test-integration.js

---
*Generado el ${new Date().toLocaleString()}*
`;

  fs.writeFileSync('deployment-checklist.md', checklist);
  log('üìã Checklist de deployment generado: deployment-checklist.md', 'cyan');
}

// Funci√≥n principal
function main() {
  log('üöÄ INICIANDO PROCESO DE DEPLOYMENT - EL ALMAC√âN DE LOS RECUERDOS', 'bold');
  log('================================================================', 'blue');
  
  // Verificaciones previas
  if (!preDeploymentChecks()) {
    log('\n‚ùå DEPLOYMENT CANCELADO: Fallan verificaciones previas', 'red');
    process.exit(1);
  }

  // Testing previo
  if (!runPreDeploymentTests()) {
    log('\n‚ùå DEPLOYMENT CANCELADO: Tests previos fallaron', 'red');
    process.exit(1);
  }

  // Build de producci√≥n
  if (!buildProduction()) {
    log('\n‚ùå DEPLOYMENT CANCELADO: Build de producci√≥n fall√≥', 'red');
    process.exit(1);
  }

  // Build de Electron (opcional)
  const electronSuccess = buildElectron();

  // Generar documentaci√≥n
  generateDeploymentDocs();
  generateDeploymentChecklist();

  // Resultado final
  logSection('üéâ DEPLOYMENT COMPLETADO');
  
  log('‚úÖ Web build completado exitosamente', 'green');
  if (electronSuccess) {
    log('‚úÖ Electron build completado exitosamente', 'green');
  } else {
    log('‚ö†Ô∏è Electron build omitido o fall√≥ (no cr√≠tico)', 'yellow');
  }
  
  log('\nüìÅ Archivos generados:', 'cyan');
  log('  - dist/ (web deployment)', 'cyan');
  if (electronSuccess) {
    log('  - release/ (electron deployment)', 'cyan');
  }
  log('  - deployment-info.md', 'cyan');
  log('  - deployment-checklist.md', 'cyan');
  
  log('\nüéØ PROYECTO LISTO PARA PRODUCCI√ìN', 'green');
  log('üìñ Revisar deployment-checklist.md para siguientes pasos', 'cyan');
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main();
}

module.exports = {
  preDeploymentChecks,
  runPreDeploymentTests,
  buildProduction,
  buildElectron,
  generateDeploymentDocs
};
